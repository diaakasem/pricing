{"version":3,"sources":["../src/index.js"],"names":["PackagePricing","utils","peopleToReachSinglePayer","buyUSD","sellUSD","priceBase","deliveryFees","payfortPercentage","payfortConstInUSD","taxes","additionalTaxes","saftyMargin","fbPayPerImpression","plivoSMSUSD","defaultRoundingBase","amount","payfortConst","payfortVariable","ret","fbAdPerAccount","log","SMSFees","smsCostUntilWeGetToABuyer","Math","round","packageIndex","users","months","roundingBase","index","roundBase","mround","basePackagePrice","netPrice","withSaftey","calcTaxes","additionalFees","withAcquisition","transfereFees","calcPayFortFees","gross","price"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport Utils from './utils';\n\nexport default class PackagePricing {\n\n    constructor() {\n        this.utils = new Utils(false, 25);\n        // Based on the 80/20 rule .. doubled\n        this.peopleToReachSinglePayer = 25;\n        // Price per 1 USD in EGP\n        this.buyUSD = 18;\n        this.sellUSD = 17;\n        // The Very Base Price\n        this.priceBase = 13;\n        // The money transfer fees\n        this.deliveryFees = 10;\n        // is the share that payfort takes  2.65 %\n        this.payfortPercentage = 0.0265;\n        this.payfortConstInUSD = 0.14;\n        // Taxes\n        this.taxes = 0.22;\n        this.additionalTaxes = 0.14;\n        // Set Safty Margin .. in case we miss something\n        this.saftyMargin = 0.1;\n        // Acquisition by Facebook Ads\n        this.fbPayPerImpression = 0.00734;\n        // Using Plivo in usd\n        this.plivoSMSUSD = 0.035;\n        // Default rounding base - will be multiplied by 10\n        this.defaultRoundingBase = 5;\n    }\n\n    /**\n     * Calculates the payfort fees used to transfer money from user's CC to\n     * company's bank account\n     * @param {Number} amount The amount in EGP\n     * @return {Number} The payfort fees per amount in EGP\n     */\n    calcPayFortFees(amount) {\n        // The constant that payfort takes in USD\n        let payfortConst = this.payfortConstInUSD * this.buyUSD;\n        let payfortVariable = this.payfortPercentage * amount;\n        return payfortVariable + payfortConst;\n    }\n\n    /**\n     * Calculates the taxes\n     * @param {Number} amount The amount of money to calculate taxes on\n     * @return {Number} The amount of money, with taxes considered ( added )\n     */\n    calcTaxes(amount) {\n        let ret = amount * this.taxes + amount * this.additionalTaxes;\n        return ret;\n    }\n\n    /**\n     * Calculate additional fees per user for acquisition\n     * @return fixed number based on the plivoSMS rate and fbAd rate\n     */\n    additionalFees() {\n        let fbAdPerAccount = this.fbPayPerImpression * this.peopleToReachSinglePayer * this.buyUSD;\n        this.utils.log(\"FB Ad per Account\", fbAdPerAccount);\n        let SMSFees = this.plivoSMSUSD * this.buyUSD;\n        let smsCostUntilWeGetToABuyer = SMSFees * this.peopleToReachSinglePayer;\n        this.utils.log(\"SMS Cost per Buyer\", smsCostUntilWeGetToABuyer);\n        return Math.round(fbAdPerAccount + smsCostUntilWeGetToABuyer);\n    };\n\n    /**\n     * @param {Number} packageIndex 0 ( free ) 1 ( basic ) 2 ( advanced ) 3 ( extreme )\n     * each packageIndex has more features than the ones before\n     * @param {Number} users Buying for how many users. must be > 0\n     * @param {Number} months 1 -to- 12\n     * @return {Number} The price\n     */\n     price(packageIndex, users, months, roundingBase) {\n        // Free Package\n        if (packageIndex === 0) {\n            return 0;\n        }\n        this.utils.log('Arguments', {\n            index: packageIndex,\n            users: users,\n            months: months\n        });\n        // Pricing rounding base\n        let roundBase = this.utils.mround(this.priceBase, 10) * (roundingBase || this.defaultRoundingBase);\n        this.utils.log('Round Base', roundBase);\n        let basePackagePrice = packageIndex * this.priceBase;\n        this.utils.log('Base Package Price', basePackagePrice);\n        let netPrice =  basePackagePrice * months * users ;\n        this.utils.log('Net Price', netPrice);\n        let withSaftey = netPrice + (netPrice * this.saftyMargin);\n        this.utils.log('With Saftey', withSaftey);\n        let taxes = this.calcTaxes(withSaftey);\n        this.utils.log('Taxes', taxes);\n        this.utils.log('Additional Fees', this.additionalFees());\n        let withAcquisition = this.additionalFees() + taxes + withSaftey;\n        this.utils.log('With Acquisition', withAcquisition);\n        let transfereFees = this.calcPayFortFees(withAcquisition);\n        this.utils.log('Transfere Fees', transfereFees);\n        let gross = withAcquisition + transfereFees;\n        this.utils.log('Gross', gross);\n        let price = this.utils.mround(gross + (roundBase / 2), roundBase);\n        this.utils.log('Price', price);\n        return price;\n    };\n};\n"]}