{"version":3,"sources":["../src/index.js"],"names":["PackagePricing","utils","peopleToReachSinglePayer","buyUSD","sellUSD","priceBase","deliveryFees","payfortPercentage","payfortConstInUSD","taxes","additionalTaxes","saftyMargin","fbPayPerImpression","plivoSMSUSD","defaultRoundingBase","amount","payfortConst","payfortVariable","ret","fbAdPerAccount","log","SMSFees","smsCostUntilWeGetToABuyer","Math","round","packageIndex","users","months","roundingBase","originalPrice","price","saving","savingPercent","index","roundBase","mround","usdRoundBase","basePackagePrice","netPrice","withSaftey","calcTaxes","additionalFees","withAcquisition","transfereFees","calcPayFortFees","gross","originalPriceInUsd","priceInUsd","savingsEGP","calcSavings","savingsUSD","priceAnnually","parseFloat","percent","toFixed","currency","singleUserPaysMonthly","singleUserPaysAnnually","youPayAnnually","baseSavingPrice","toLowerCase","EGP","USD","youSave","toUpperCase"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport Utils from './utils';\n\nexport default class PackagePricing {\n\n    constructor() {\n        //DEBUG\n        this.utils = new Utils(false, 25);\n        // Based on the 80/20 rule .. doubled\n        this.peopleToReachSinglePayer = 25;\n        // Price per 1 USD in EGP\n        this.buyUSD = 18;\n        this.sellUSD = 17;\n        // The Very Base Price\n        this.priceBase = 13;\n        // The money transfer fees\n        this.deliveryFees = 10;\n        // is the share that payfort takes  2.65 %\n        this.payfortPercentage = 0.0265;\n        this.payfortConstInUSD = 0.14;\n        // Taxes\n        this.taxes = 0.22;\n        this.additionalTaxes = 0.14;\n        // Set Safty Margin .. in case we miss something\n        this.saftyMargin = 0.1;\n        // Acquisition by Facebook Ads\n        this.fbPayPerImpression = 0.00734;\n        // Using Plivo in usd\n        this.plivoSMSUSD = 0.035;\n        // Default rounding base - will be multiplied by 10\n        this.defaultRoundingBase = 5;\n    }\n\n    /**\n     * Calculates the payfort fees used to transfer money from user's CC to\n     * company's bank account\n     * @param {Number} amount The amount in EGP\n     * @return {Number} The payfort fees per amount in EGP\n     */\n    calcPayFortFees(amount) {\n        // The constant that payfort takes in USD\n        let payfortConst = this.payfortConstInUSD * this.buyUSD;\n        let payfortVariable = this.payfortPercentage * amount;\n        return payfortVariable + payfortConst;\n    }\n\n    /**\n     * Calculates the taxes\n     * @param {Number} amount The amount of money to calculate taxes on\n     * @return {Number} The amount of money, with taxes considered ( added )\n     */\n    calcTaxes(amount) {\n        let ret = amount * this.taxes + amount * this.additionalTaxes;\n        return ret;\n    }\n\n    /**\n     * Calculate additional fees per user for acquisition\n     * @return fixed number based on the plivoSMS rate and fbAd rate\n     */\n    additionalFees() {\n        let fbAdPerAccount = this.fbPayPerImpression * this.peopleToReachSinglePayer * this.buyUSD;\n        this.utils.log(\"FB Ad per Account\", fbAdPerAccount);\n        let SMSFees = this.plivoSMSUSD * this.buyUSD;\n        let smsCostUntilWeGetToABuyer = SMSFees * this.peopleToReachSinglePayer;\n        this.utils.log(\"SMS Cost per Buyer\", smsCostUntilWeGetToABuyer);\n        return Math.round(fbAdPerAccount + smsCostUntilWeGetToABuyer);\n    }\n\n    /**\n     * @param {Number} packageIndex 0 ( free ) 1 ( basic ) 2 ( advanced ) 3 ( extreme )\n     * each packageIndex has more features than the ones before\n     * @param {Number} users Buying for how many users. must be > 0\n     * @param {Number} months 1 -to- 12\n     * @param {Number} roundingBase - The priceBase is rounded to 10 and then\n     * multiplied by this roundingBase, so that you expect the price to be\n     * multiple of say ( 25 ) if the price base is 13 and the rounding base is\n     * 2.5. or package is multiple of ( 50 ) if the price base is 14.5 and the\n     * roundingBase is 5 ..  etc..\n     * @return {Object} The price information object. ex.\n     * if inputs are\n     *  {\n     *       name: 'Some Name',\n     *       users: 1,\n     *       months: 1,\n     *       packageIndex: 1,\n     *       roundingBase: 2.5\n     *  }\n     *\n     * result would be\n     *  {\n     *      \"EGP\": {\n     *          \"originalPrice\": 600,\n     *          \"price\": 50,\n     *          \"priceAnnually\": 600,\n     *          \"saving\": 0,\n     *          \"savingPercent\": 0,\n     *      },\n     *      \"USD\": {\n     *          \"originalPrice\": 36,\n     *          \"price\": 3,\n     *          \"priceAnnually\": 36,\n     *          \"saving\": 0,\n     *          \"savingPercent\": 0,\n     *      }\n     *  }\n     */\n    price(packageIndex, users, months, roundingBase) {\n        // Free Package\n        if (packageIndex === 0) {\n            return {\n                'EGP': {\n                    originalPrice: 0,\n                    price: 0,\n                    saving: 0,\n                    savingPercent: 0\n                },\n                'USD': {\n                    originalPrice: 0,\n                    price: 0,\n                    saving: 0,\n                    savingPercent: 0\n                }\n            };\n        }\n        this.utils.log('Arguments', {\n            index: packageIndex,\n            users: users,\n            months: months\n        });\n        // Pricing rounding base\n        let roundBase = this.utils.mround(this.priceBase, 10) * (roundingBase || this.defaultRoundingBase);\n        // USD Pricing rounding base\n        let usdRoundBase = 3 * packageIndex;\n        this.utils.log('Round Base', roundBase);\n        let basePackagePrice = packageIndex * this.priceBase;\n        this.utils.log('Base Package Price', basePackagePrice);\n        let netPrice =  basePackagePrice * months * users ;\n        this.utils.log('Net Price', netPrice);\n        let withSaftey = netPrice + (netPrice * this.saftyMargin);\n        this.utils.log('With Saftey', withSaftey);\n        let taxes = this.calcTaxes(withSaftey);\n        this.utils.log('Taxes', taxes);\n        this.utils.log('Additional Fees', this.additionalFees());\n        let withAcquisition = this.additionalFees() + taxes + withSaftey;\n        this.utils.log('With Acquisition', withAcquisition);\n        let transfereFees = this.calcPayFortFees(withAcquisition);\n        this.utils.log('Transfere Fees', transfereFees);\n        let gross = withAcquisition + transfereFees;\n        this.utils.log('Gross', gross);\n        let price = this.utils.mround(gross + (roundBase / 2), roundBase);\n        this.utils.log('Price', price);\n        let originalPriceInUsd = price / this.sellUSD;\n        this.utils.log('Original Price In USD', originalPriceInUsd);\n        let priceInUsd = this.utils.mround(originalPriceInUsd + (usdRoundBase/2), usdRoundBase);\n        this.utils.log('Price In USD', priceInUsd);\n        let savingsEGP = this.calcSavings(packageIndex, price, users, months, 'EGP');\n        let savingsUSD = this.calcSavings(packageIndex, priceInUsd, users, months, 'usd');\n        return {\n            'EGP': {\n                priceAnnually: price * (12/months),\n                originalPrice: savingsEGP.originalPrice,\n                price: price,\n                saving: savingsEGP.saving,\n                savingPercent: parseFloat(savingsEGP.percent.toFixed(2))\n            },\n            'USD': {\n                priceAnnually: priceInUsd * (12/months),\n                originalPrice: savingsUSD.originalPrice,\n                price: priceInUsd,\n                saving: savingsUSD.saving,\n                savingPercent: parseFloat(savingsUSD.percent.toFixed(2))\n            }\n        };\n    };\n\n    /**\n     * Calculates savings for a package per user annually.\n     *\n     * @param {Number} packageIndex The package index to multiple to for pricing\n     * @param {Number} price The price already calculated for the package\n     * @param {Number} users The count of users for this package\n     * @param {Number} months The period of periodical payment for user\n     * @param {String} currency Either \"USD\" or \"EGP\"\n     * @return {Object} The savings object. ex.\n     * {\n     *      packageIndex: 1,\n     *      originalPrice: 150,\n     *      price: 100,\n     *      users: 3,\n     *      months: 1,\n     *      currency: 'EGP',\n     *      saving: 50,\n     *      percent: 0.33\n     *  }\n     */\n    calcSavings(packageIndex, price, users, months, currency) {\n        let singleUserPaysMonthly = (price / users) / months;\n        this.utils.log('Single User Pays Monthly', singleUserPaysMonthly);\n        let singleUserPaysAnnually = singleUserPaysMonthly * 12;\n        this.utils.log('Single User Pays Annually', singleUserPaysAnnually);\n        let youPayAnnually = singleUserPaysAnnually * users;\n        let baseSavingPrice = youPayAnnually;\n        if (!(users === 1 && months === 1)) {\n            if (currency.toLowerCase() === 'egp') {\n                baseSavingPrice = this.price(packageIndex, 1, 1).EGP.price * 12 * users;\n            } else {\n                baseSavingPrice = this.price(packageIndex, 1, 1).USD.price * 12 * users;\n            }\n        }\n        this.utils.log('Base Savinig Price', baseSavingPrice);\n        let youSave = baseSavingPrice - youPayAnnually;\n        this.utils.log('You Save', youSave);\n        let savingPercent = youSave/baseSavingPrice\n        this.utils.log('Saving Percent', savingPercent);\n        return {\n            packageIndex: packageIndex,\n            originalPrice: baseSavingPrice,\n            price: price,\n            users: users,\n            months: months,\n            currency: currency.toUpperCase(),\n            saving: youSave,\n            percent: savingPercent\n        };\n    }\n};\n"]}